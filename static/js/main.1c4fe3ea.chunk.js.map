{"version":3,"sources":["components/GameCard/index.js","components/GameArea/index.js","App.js","reportWebVitals.js","index.js"],"names":["GameCard","cardData","index","clickHandler","isClosed","url","name","className","onClick","alt","src","STATE_LOCAL_STORAGE","GameArea","useState","cardConfig","gameCards","setGameCards","clickPicture","newCards","localStorage","setItem","JSON","stringify","map","card","Number","board","picture","i","useEffect","storedState","parse","getItem","console","log","newBoard","player","Boolean","clearedBoard","removeItem","style","position","top","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wq2BAceA,EAZE,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,aAC1BC,EAAwBH,EAAxBG,SAAUC,EAAcJ,EAAdI,IAAcJ,EAATK,KACvB,OAAO,sBAAKC,UAAU,UAAUC,QAAS,kBAAML,EAAaD,IAArD,UACL,qBACEO,IAAKP,EACLK,UAAU,YACVG,IAAKL,IAEND,EAAW,qBAAKG,UAAU,aAAf,eAAsC,S,OCJhDI,EAAsB,aAuDbC,EArDE,WAAO,IAAD,EACaC,mBAASC,GADtB,mBACdC,EADc,KACHC,EADG,KAEfC,EAAe,SAACf,GACpB,IAAMgB,EAAQ,YAAOH,GACrBG,EAAShB,GAAOE,UAAYc,EAAShB,GAAOE,SAC5CY,EAAaE,GACbC,aAAaC,QAAQT,EAAqBU,KAAKC,UAAUJ,EAASK,KAAI,SAAAC,GAAI,OAAIC,SAASD,EAAKpB,gBAGxFsB,EAAQX,EAAUQ,KAAI,SAACI,EAASC,GACpC,OAAO,cAAC,EAAD,CAEL1B,MAAO0B,EACP3B,SAAU0B,EACVxB,aAAcc,GAHTW,MAOTC,qBAAU,WACR,IAAMC,EAAcT,KAAKU,MAAMZ,aAAaa,QAAQrB,IAEpD,GADAsB,QAAQC,IAAIJ,GACRA,EAAa,CACf,IAAMK,EAAWpB,EAAUQ,KAAI,SAACa,EAAQR,GACtC,OAAO,2BACFQ,GADL,IAEEhC,SAAUiC,QAAQP,EAAYF,SAGlCZ,EAAamB,MAEd,IASH,OACA,qCACE,qBAAK5B,UAAU,UAAf,SACGmB,IAEH,wBAAQlB,QAbS,WACjB,IAAM8B,EAAevB,EAAUQ,KAAI,SAACI,GAAD,mBAAC,eAC/BA,GAD8B,IAEjCvB,UAAU,OAEZY,EAAasB,GACbnB,aAAaoB,WAAW5B,IAQxB6B,MAAO,CACLC,SAAU,WACVC,IAAK,OAHP,uBCzCWC,MARf,WACE,OACE,qBAAKpC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1c4fe3ea.chunk.js","sourcesContent":["import './GameCard.css';\n\nconst GameCard = ({cardData, index, clickHandler}) => {\n  const { isClosed, url, name } = cardData;\n  return <div className=\"picture\" onClick={() => clickHandler(index)}>\n    <img \n      alt={index}\n      className='cardImage'\n      src={url}\n    />\n    {isClosed ? <div className=\"closeImage\">X</div> : null}\n  </div>\n}\n\nexport default GameCard;","import './GameArea.css';\nimport GameCard from '@components/GameCard';\n\nimport cardConfig from '@src/cards.json';\nimport { useState, useEffect } from 'react';\n\nconst STATE_LOCAL_STORAGE = 'boardState';\n\nconst GameArea = () => {\n  const [gameCards, setGameCards] = useState(cardConfig);\n  const clickPicture = (index) => {\n    const newCards = [...gameCards];\n    newCards[index].isClosed = !newCards[index].isClosed;\n    setGameCards(newCards);\n    localStorage.setItem(STATE_LOCAL_STORAGE, JSON.stringify(newCards.map(card => Number(!!card.isClosed))))\n  };\n\n  const board = gameCards.map((picture, i) => {\n    return <GameCard \n      key={i} \n      index={i} \n      cardData={picture} \n      clickHandler={clickPicture}\n      />\n  })\n\n  useEffect(() => {\n    const storedState = JSON.parse(localStorage.getItem(STATE_LOCAL_STORAGE))\n    console.log(storedState);\n    if (storedState) {\n      const newBoard = gameCards.map((player, i) => {\n        return {\n          ...player,\n          isClosed: Boolean(storedState[i]),\n        };\n      });\n      setGameCards(newBoard);\n    }\n  }, [])\n  const clearBoard = () => {\n    const clearedBoard = gameCards.map((picture) => ({\n      ...picture,\n      isClosed: false,\n    }));\n    setGameCards(clearedBoard);\n    localStorage.removeItem(STATE_LOCAL_STORAGE);\n  }\n  return (\n  <>\n    <div className=\"wrapper\">\n      {board}\n    </div>\n    <button onClick={clearBoard}\n    style={{\n      position: 'absolute',\n      top: '0px',\n    }}>Reset</button>\n  </>\n  );\n}\n\nexport default GameArea;","import './App.css';\nimport GameArea from '@components/GameArea';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameArea />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}